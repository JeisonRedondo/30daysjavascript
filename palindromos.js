/**En este desaf칤o, debes crear una funci칩n que encuentre el pal칤ndromo m치s largo en una lista de palabras.

Recibir치s un 칰nico par치metro: un array de palabras.Si no hay ning칰n pal칤ndromo en la lista, la funci칩n debe devolver null.Si hay m치s de un pal칤ndromo con la misma longitud m치xima, debes devolver el primer pal칤ndromo encontrado en la lista.*/

/*Un pal칤ndromo es una palabra que se puede leer de la misma manera tanto hacia adelante como hacia atr치s.*/

// Ejemplo 1:

// Input: findLargestPalindrome(["racecar", "level", "world", "hello"])

// Output: "racecar"

// Ejemplo 2:

// Input: findLargestPalindrome(["Platzi", "javascript", "html", "css","aibofibia"])

// Output: null

const wordsTest1 = ["level", "racecar", "world", "hello", "ana", "apocopa", "aibofobia"];
const wordsTest = ["leveel", "racecarr", "worldrt", "hello", "anta", "apocopera", "aiboftobia"];

function findLargestPalindrome(words) {
    // Tu c칩digo aqu칤 游녣

    function reverseString(string) {
        return string.split("").reverse().join("");
    };

    function palindromoExist(word) {
        return word === reverseString(word);
    }

    const palindrome =words.reduce((acumulator, char) => {


        if (palindromoExist(char)) {
            if (char.length > acumulator.length) {
                acumulator = char;
            }
        }
        return acumulator;

    },"")

    return (palindrome == "" ? null : palindrome);

}

findLargestPalindrome(wordsTest);